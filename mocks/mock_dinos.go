// Code generated by MockGen. DO NOT EDIT.
// Source: ../dinosaur/dinosaur.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dinosaur "github.com/callisto13/cretaceous/dinosaur"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTheropod is a mock of Theropod interface
type MockTheropod struct {
	ctrl     *gomock.Controller
	recorder *MockTheropodMockRecorder
}

// MockTheropodMockRecorder is the mock recorder for MockTheropod
type MockTheropodMockRecorder struct {
	mock *MockTheropod
}

// NewMockTheropod creates a new mock instance
func NewMockTheropod(ctrl *gomock.Controller) *MockTheropod {
	mock := &MockTheropod{ctrl: ctrl}
	mock.recorder = &MockTheropodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTheropod) EXPECT() *MockTheropodMockRecorder {
	return m.recorder
}

// Roar mocks base method
func (m *MockTheropod) Roar() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roar")
	ret0, _ := ret[0].(error)
	return ret0
}

// Roar indicates an expected call of Roar
func (mr *MockTheropodMockRecorder) Roar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roar", reflect.TypeOf((*MockTheropod)(nil).Roar))
}

// Run mocks base method
func (m *MockTheropod) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockTheropodMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTheropod)(nil).Run))
}

// Eat mocks base method
func (m *MockTheropod) Eat(prey dinosaur.Sauropod) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eat", prey)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eat indicates an expected call of Eat
func (mr *MockTheropodMockRecorder) Eat(prey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eat", reflect.TypeOf((*MockTheropod)(nil).Eat), prey)
}

// MockSauropod is a mock of Sauropod interface
type MockSauropod struct {
	ctrl     *gomock.Controller
	recorder *MockSauropodMockRecorder
}

// MockSauropodMockRecorder is the mock recorder for MockSauropod
type MockSauropodMockRecorder struct {
	mock *MockSauropod
}

// NewMockSauropod creates a new mock instance
func NewMockSauropod(ctrl *gomock.Controller) *MockSauropod {
	mock := &MockSauropod{ctrl: ctrl}
	mock.recorder = &MockSauropodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSauropod) EXPECT() *MockSauropodMockRecorder {
	return m.recorder
}

// Escape mocks base method
func (m *MockSauropod) Escape() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Escape")
	ret0, _ := ret[0].(error)
	return ret0
}

// Escape indicates an expected call of Escape
func (mr *MockSauropodMockRecorder) Escape() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Escape", reflect.TypeOf((*MockSauropod)(nil).Escape))
}

// Eat mocks base method
func (m *MockSauropod) Eat() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eat")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Eat indicates an expected call of Eat
func (mr *MockSauropodMockRecorder) Eat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eat", reflect.TypeOf((*MockSauropod)(nil).Eat))
}
